1. Crear componentes Card y Select
2. Llamar componentes desde app
3. Poner una img de prueba en el card <img><p>
4. entrar al link para compiar el index.css
5. crear el estado breeds initialBreads(id,name) Select components
6. Mostramos los breead en la pantalla los iniciales
7. Cargar informacion en la primera carga del componentes (Select)
8. Crear un archivo helpers/getBreedas para ontener los breeds y retornarla , recordar exportarla (https://api.thedogapi.com/v1/breeds), id y name
9. En nuestro componente select creamos una funcion par aactualizar lo breeds (updateBreeds), osea llamar a los breeds nuevamente
10. luego esa funcion la llamamos en el efecto
---------------------DONE 1-10---------------------
11. Colocar el evento Onchange al select e imprimir una alerta con msj
12. Cada vez que hagamos el onchange vamos a cambiar la imagen para eso debemos parar informacion al Card, Nos vamos al nivel mas alto que es App.
13. Crear estado dog en app e inicialdog(image:urlImage, y un objeto de raza(id:"1", name=Labrador).
14. Mandamos la informacion a la Card.
15. Recibir la informacion en card por medio de props
16. Reemplazar la url de la imagen por la recibida en la props. ante de usar esa url en el valor initial a modo de ejemplo. y completar lo demas variables.
17. Imprimir el name, Probar que todo funcione.
18. Creamos otro helpers getDog para obtener las informacion. usar la aleatoria por el momento(https://api.thedogapi.com/v1/images/search).
19. En app hacemos una funcion (updateDog) y llamamos a la api getDog y asignar las infomacion recibida al estado ya creado (dog) ver lo que imprime por consola. 
20. en el helper get dog tratar de formatear el objeto y asinar al estado en el app.
---------------------DONE 11-20---------------------
21. Corregir el inconveniente cuando las razas vienen vacia, poner unas razas random por defecto.
22. Al editar los valores del objeto devemos quitar el const y convertirlo en variables let para asi editarlo.
23. Es momento cuando seleccione el select  cambie, le mandamos la funcion update al componente select.
24. Recibimos la funcion en los props. Luego llamar dicha funcion en el evento onchange.
25. Probar que haga el cambio.
26. Una vez que todo funcione, ahora vamos a recibir la raza elegida, primero debemos recibir el breedId getDog
27. Si el breedId === 0 que traiga un dog aleatorio de lo contrario traer el que se pide (https://api.thedogapi.com/v1/images/search?breed_ids=)
28. Enviar el parametro breedid al helper getDog.
29. En el useEffect enviar un id para el error underfind. O hacer validacion en la api si el breedId es underfind
---------------------DONE 21-29---------------------
30. Mandarle la funcion al card para cuando le de clic cambiar la imagen updateDog
31. Recibir en card la funcion por props
32. Crear un evento en la card para cuando se le de clic llamar a la funcion en dico evento.
33. A la funcion le vamos a enviar el id de la raza del perro, ver en consola el objeto para saber que mandar en al funcion id de la raza.
34. Probar que todo funcione
35. Ahora vamos a poner un loading en el App mientras se carga el card, crear estado loading = false.
36. Si loading es true mostrarlo de lo contrario mostrar el card.
37. AHora otra forma de hacerlo tambien es mandando el loading al componente y alla hacer la condicion la condicion se puso ante del jsx(return). Como mejor guste.
38. Vamos a poner un spinner en vez de loading (https://loading.io/css) tomar el que mas guste.
39. Crear un componente Spinner. y en el componente pegamos el codigo html
40. Luego agregamos el css Spinner.css e importamos la hoja de estilo en el componente
41. Ahora usar dicho componente. Le cambiaremos el color ya que viene en blanco
42. Cambiar el color a otro color diferente del blanco (#666)
43. Probar todo
---------------------DONE 30-43---------------------
44. Vamos a manejar los errores
45. En el select creamos un estado error =null
46. Nos vamos a la funcion getBreeds que llama la api
47. ahi en el response vamos a usar el atributo Ok, revisar en clg()
48. si !ok lanzar un throw Error("")
49. En el componente select vamos a captura el error con el catch y lo mostrarmos a la consola
50. Mandamos un msj bonito al usuario.
51 Creamos un nuevo componete Error para mostrar los errores class=error
52. Si el error existe imprimirlo en el select

Que de en 57




 


